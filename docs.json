[{"name":"Expect.Extra","comment":"\n\n@docs expectEqualMultiline\n\n\n# Options\n\n@docs similarIfSmallDiff, similarIfSame, similarIfSameTrimming, similarIfSameIgnoringSpaces, similarIf, SimilarIf\n\n\n# Lower level API\n\n@docs diff, diffToString, LineDiff\n\n","unions":[{"name":"SimilarIf","comment":" Represents a check for similarity.\n","args":[],"cases":[]}],"aliases":[{"name":"LineDiff","comment":" The difference between two single lines.\n","args":[],"type":"Diff.Change Basics.Never Char.Char"}],"values":[{"name":"diff","comment":" Calculate the diff between two multiline strings.\n","type":"Expect.Extra.SimilarIf -> String.String -> String.String -> List.List (Diff.Change (List.List Expect.Extra.LineDiff) String.String)"},{"name":"diffToString","comment":" Converts a diff between strings into a pretty-printed, colored, formatted diff.\n\n`context` is the number of lines of context to show in the diff.\n\n","type":"{ context : Basics.Int } -> List.List (Diff.Change (List.List Expect.Extra.LineDiff) String.String) -> String.String"},{"name":"expectEqualMultiline","comment":" A version of `Expect.equal` for multiline strings.\n\n`context` is the number of lines of context to show in the message.\n\nNote: the similarity check is only used to improve the diff. `expectEqualMultiline` checks if the strings are identical or not, and will only pass if they are.\n\n","type":"{ similarIf : Expect.Extra.SimilarIf, context : Basics.Int } -> String.String -> String.String -> Expect.Expectation"},{"name":"similarIf","comment":" Custom similarity check.\n","type":"(String.String -> String.String -> Basics.Bool) -> Expect.Extra.SimilarIf"},{"name":"similarIfSame","comment":" Only consider two lines similar if they are the same.\n","type":"Expect.Extra.SimilarIf"},{"name":"similarIfSameIgnoringSpaces","comment":" Consider two lines similar if they are the same ignoring all spaces, both leading/trailing and within the line.\n","type":"Expect.Extra.SimilarIf"},{"name":"similarIfSameTrimming","comment":" Consider two lines similar if they are the same ignoring leading/trailing whitespace.\n","type":"Expect.Extra.SimilarIf"},{"name":"similarIfSmallDiff","comment":" Consider two lines similar if their diff is less than 1/4 of the total length.\n\nThis is more expensive to compute than the other conditions, but will produce the best diffs.\n\n","type":"Expect.Extra.SimilarIf"}],"binops":[]}]